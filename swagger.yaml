swagger: "2.0"
host: "localhost:9000"
basePath: "/"
info:
  description: "Необходимо написать приложение на Scala, которое представляет из себя http сервер , предоставляющий REST API для работы с телефонным справочником со следующим функционалом (бэкенд). Для просмотра можно использовать сайт https://editor.swagger.io/"
  version: "0.0.1"
  title: "Тестовое задание Naumen"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "contact"
schemes:
- "http"
paths:
  /contact:
    post:
      tags:
      - "contact"
      summary: "Добавить телефон (строка) и имя (строка) в справочник"
      description: ""
      operationId: "addContact"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        400:
          description: "Invalid input"      
      parameters:
      - in: "body"
        name: "body"
        description: "Contact object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/ContactRequest"
  /contacts:
    get:
      tags:
      - "contact"
      summary: "Получить список ранее добавленных вхождений в справочник"
      description: ""
      operationId: "listContacts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
  /contact/findByName:
    get:
      tags:
      - "contact"
      summary: "Поиск всех вхождений по подстроке имени"
      description: "Muliple names can be provided with comma separated strings."
      operationId: "findContactsByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name prefix to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid name value"              
  /contact/findByPhone:
    get:
      tags:
      - "contact"
      summary: "Поиск всех вхождений по подстроке номера"
      description: "Muliple phone numbers can be provided with comma separated strings."
      operationId: "findContactsByPhone"
      produces:
      - "application/json"
      parameters:
      - name: "phone"
        in: "query"
        description: "Phone Number prefix to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"        
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid phone value" 
  /contact/{contactId}:
    get:
      tags:
      - "contact"
      summary: "Получить значения телефона или имени во вхождении выбранному по id"
      description: "Returns a single contact"
      operationId: "getContactById"
      produces:
      - "application/json"
      parameters:
      - name: "contactId"
        in: "path"
        description: "ID of contact to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Contact"
        404:
          description: "Contact not found"
    put:
      tags:
      - "contact"
      summary: "Изменить значения телефона или имени во вхождении выбранному по id"
      description: ""
      operationId: "updateContact"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        400:
          description: "Invalid input"      
      parameters:
      - name: "contactId"
        in: "path"
        description: "ID of contact to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Contact object that needs to be updated in the store"
        required: true
        schema:
          $ref: "#/definitions/ContactRequest"      
    delete:
      tags:
      - "contact"
      summary: "Удалить из справочника вхождение по id"
      description: ""
      operationId: "deleteContact"
      produces:
      - "application/json"
      parameters:
      - name: "contactId"
        in: "path" 
        description: "Contract id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Contact not found"

definitions:
  Contact:
    type: "object"
    required:
    - "name"
    - "phoneNumber"    
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      phoneNumber:
        type: "string"
        example: "+712345678910"
      name:
        type: "string"
        example: "Jhon Dow"
  ContactRequest:
    type: "object"
    required:
    - "name"
    - "phoneNumber"    
    properties:
      phoneNumber:
        type: "string"
        example: "+712345678910"
      name:
        type: "string"
        example: "Jhon Dow"